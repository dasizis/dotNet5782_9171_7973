<UserControl x:Class="PL.DroneControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:PL"
            xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"            
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <UserControl.Resources>
        <local:StateToChargeVisibilityConverter x:Key="StateToChargeVisibilityConverter" />
        <local:StateToProceedVisibilityConverter x:Key="StateToProceedVisibilityConverter" />
        <local:StateToChargeContentConverter x:Key="DroneToChargeContentConverter" />
        <local:DroneToProceedContentConverter x:Key="DroneToProceedContentConverter" />
        <local:AggregateBooleansConverter x:Key="AggregateBooleansConverter" />

        <Style TargetType="TextBox" BasedOn="{StaticResource MaterialDesignOutlinedTextBox}" >
            <Setter Property="Margin" Value="10" />
        </Style>
        
        <Style TargetType="TextBlock" BasedOn="{StaticResource MaterialDesignBody2TextBlock}" >
            <Setter Property="Margin" Value="10" />
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
        </Style>

        <Style TargetType="ComboBox" BasedOn="{StaticResource MaterialDesignOutlinedComboBox}" >
            <Setter Property="Margin" Value="10" />
        </Style>

        <Style x:Key="PropText" TargetType="TextBlock" BasedOn="{StaticResource MaterialDesignHeadline6TextBlock}" >
            <Setter Property="Margin" Value="20" />
        </Style>

        <Style TargetType="Button" BasedOn="{StaticResource MaterialDesignFlatButton}" >
            <Setter Property="Margin" Value="10" />
        </Style>
    </UserControl.Resources>
    <StackPanel>

        <TextBox x:Name="IdInput" materialDesign:HintAssist.Hint="Id" IsEnabled="{Binding IsAddMode}">
            <TextBox.Text>
                <Binding Path="Id" UpdateSourceTrigger="PropertyChanged" >
                    <Binding.ValidationRules>
                        <local:NumberRule ValidatesOnTargetUpdated="True" />
                    </Binding.ValidationRules>
                </Binding>
            </TextBox.Text>
        </TextBox>

        <TextBox x:Name="ModelInput" materialDesign:HintAssist.Hint="Model">
            <TextBox.Text>
                <Binding Path="Model" UpdateSourceTrigger="PropertyChanged" >
                    <Binding.ValidationRules> 
                        <local:NameRule ValidatesOnTargetUpdated="True" />
                    </Binding.ValidationRules>
                </Binding>
            </TextBox.Text>
        </TextBox>

        <ComboBox x:Name="WeightInput" ItemsSource="{Binding WeightOptions}" materialDesign:HintAssist.Hint="Weight Category" IsEnabled="{Binding IsAddMode}">
            <ComboBox.SelectedItem>
                <Binding Path="SelectedWeight" UpdateSourceTrigger="PropertyChanged">
                    <Binding.ValidationRules>
                        <local:NotEmptyRule ValidatesOnTargetUpdated="True" />
                    </Binding.ValidationRules>
                </Binding>
            </ComboBox.SelectedItem>
        </ComboBox>

        <ComboBox x:Name="StationInput" 
                  ItemsSource="{Binding StationsOptions}" 
                  materialDesign:HintAssist.Hint="Station Id" 
                  IsEnabled="{Binding IsAddMode}">
            <ComboBox.SelectedItem>
                <Binding Path="SelectedStation" UpdateSourceTrigger="PropertyChanged">
                    <Binding.ValidationRules>
                        <local:NotEmptyRule ValidatesOnTargetUpdated="True" />
                    </Binding.ValidationRules>
                </Binding>
            </ComboBox.SelectedItem>
        </ComboBox>

        <Grid Visibility="{Binding IsActionsMode, Converter={StaticResource BooleanToVisibilityConverter}}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <StackPanel Grid.Column="0" HorizontalAlignment="Center" VerticalAlignment="Top">
                <materialDesign:PackIcon Kind="Details" Foreground="{DynamicResource PrimaryHueLightBrush}" HorizontalAlignment="Center" Margin="40,40,40,10" Height="40" Width="40"/>
                <TextBlock Text="{Binding Battery, StringFormat=Battery: {0}%}"/>
                <TextBlock x:Name="ParcelId" Text="{Binding Parcel.Id, StringFormat=Connected Parcel: #{0}}" />
            </StackPanel>
            <StackPanel Grid.Column="1" HorizontalAlignment="Center" >
                <materialDesign:PackIcon Kind="MapMarkerRadius" Foreground="{DynamicResource PrimaryHueLightBrush}" HorizontalAlignment="Center" Margin="40,40,40,10" Height="40" Width="40"/>
                <TextBlock Text="Longitude"/>
                <TextBlock Text="{Binding Location.Longitude}"/>
                <TextBlock Text="Latitude"/>
                <TextBlock Text="{Binding Location.Latitude}"/>
            </StackPanel>
        </Grid>

        <!--Add-->
        <Button Visibility="{Binding IsAddMode, Converter={StaticResource BooleanToVisibilityConverter}}"
                HorizontalAlignment="Center"
                 Content="ADD"
                 Click="AddButton_Click">
            <Button.Style>
                <Style TargetType="Button" BasedOn="{StaticResource MaterialDesignFlatButton}">
                    <Setter Property="IsEnabled" Value="False"/>
                    <Style.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(Validation.HasError), ElementName=IdInput}" Value="False"/>
                                <Condition Binding="{Binding Path=(Validation.HasError), ElementName=ModelInput}" Value="False"/>
                                <Condition Binding="{Binding Path=(Validation.HasError), ElementName=WeightInput}" Value="False"/>
                                <Condition Binding="{Binding Path=(Validation.HasError), ElementName=StationInput}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="IsEnabled" Value="True"/>
                        </MultiDataTrigger>
                    </Style.Triggers>
                </Style>
            </Button.Style>
        </Button>

        <StackPanel Visibility="{Binding IsActionsMode, Converter={StaticResource BooleanToVisibilityConverter}}" Margin="0,20">
            <TextBlock Text="{Binding State, Mode=OneWay, StringFormat='The drone is {0}'}" />
            <Button Visibility="{Binding State, Converter={StaticResource StateToProceedVisibilityConverter}}"
                    ToolTip="ToDO" 
                    Click="ProceedButton_Click" >
                <Button.Content>
                    <MultiBinding Converter="{StaticResource DroneToProceedContentConverter}">
                        <Binding Path="State" />
                        <Binding Path="Parcel.Position" />
                    </MultiBinding>
                </Button.Content>
            </Button>

            <Button Visibility="{Binding State, Converter={StaticResource StateToChargeVisibilityConverter}}"
                    ToolTip="TODO" 
                    Content="{Binding State,Converter={StaticResource DroneToChargeContentConverter}}"
                    Click="ChargeButton_Click" />

            <Button ToolTip="Update Model" 
                    Content="UPDATE MODEL"
                    Click="UpdateButton_Click" >
                <Button.Style>
                    <Style TargetType="Button" BasedOn="{StaticResource MaterialDesignFlatButton}">
                        <Setter Property="IsEnabled" Value="False"/>
                        <Style.Triggers>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding Path=(Validation.HasError), ElementName=ModelInput}" Value="False"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="IsEnabled" Value="True"/>
                            </MultiDataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>
            <Button Content="x" Click="CloseButton_Click"/>
        </StackPanel>
            

    </StackPanel>
</UserControl>
